// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  PROFESSOR
  ADMIN
}

model User {
  id        String   @id
  role      UserRole
  email     String   @unique
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Course relationships
  // This creates a one-to-many relationship between professors and courses they teach
  // A professor can teach many courses, but each course has one professor
  teachingCourses Course[] @relation("ProfessorCourses")

  // This creates a many-to-many relationship between students and courses
  // A student can be enrolled in many courses, and a course can have many students
  // Prisma automatically creates a join table to manage this relationship
  enrolledCourses Course[] @relation("StudentCourses")

  // Added relation for submissions
  submissions Submission[]

  // relation for attendance
  studentAttendances   Attendance[] @relation("StudentAttendance")
  professorAttendances Attendance[] @relation("ProfessorAttendance")
}

model Course {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  code        String // e.g., "CS101"
  description String?

  // Links this course to its professor using professorId
  // The references keyword points to the id field in the User model
  professor   User?   @relation("ProfessorCourses", fields: [professorId], references: [id])
  professorId String?

  // Many-to-many relationship with students
  // Prisma creates a join table automatically
  students User[] @relation("StudentCourses")

  // One-to-many relationships with files and assignments
  // One course can have many files and assignments
  files       File[]
  assignments Assignment[]

  modules Module[] // One course can have many modules

  assignmentGroups AssignmentGroup[] //one to many relation btw Course and AssignmentGroup
  
  attendances Attendance[] //relation for attendance
  
  @@index([professorId])
  @@map("courses")
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  url  String
  type String // e.g., "pdf", "doc", etc.

  // Each file belongs to one course
  // onDelete: Cascade means if the course is deleted, its files are also deleted
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@index([courseId])
  @@map("files")
}

model AssignmentGroup {
  id          String       @id @default(cuid())
  name        String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  assignments Assignment[] @relation("GroupAssignments")
  weight      Float        @default(0) // field for group weight

  @@index([courseId])
  @@map("assignment_groups")
}

enum SubmissionType {
  NO_SUBMISSIONS
  ONLINE
}

enum OnlineSubmissionMethod {
  TEXT_ENTRY
  FILE_UPLOAD
}

model Assignment {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  description String?
  dueDate     DateTime?
  points      Int       @default(0)

  published   Boolean   @default(false)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  group   AssignmentGroup? @relation("GroupAssignments", fields: [groupId], references: [id])
  groupId String?

  files   AssignmentFile[] @relation("AssignmentFiles")

  submissionType       SubmissionType      @default(NO_SUBMISSIONS)
  onlineSubmissionMethod OnlineSubmissionMethod?

  submissions Submission[]

  isAttendanceAssignment Boolean @default(false) // Flag to identify attendance assignment

  @@index([courseId])
  @@map("assignments")
}

model AssignmentFile {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  fileName     String
  fileUrl      String

  assignment   Assignment @relation("AssignmentFiles", fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String

  @@map("assignment_files")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean        @default(false)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  sections ModuleSection[]
  files    ModuleFile[]

  @@index([courseId])
  @@map("modules")
}

model ModuleSection {
  id       String @id @default(cuid())
  title    String
  content  String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  @@index([moduleId])
  @@map("module_sections")
}

model ModuleFile {
  id       String @id @default(cuid())
  name     String
  url      String
  type     String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  @@index([moduleId])
  @@map("module_files")
}

// New model for submissions
enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
}

model Submission {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  fileName     String?
  fileUrl      String?
  status       SubmissionStatus @default(SUBMITTED)
  
  grade        Float?
  feedback     String?
  
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  
  student      User             @relation(fields: [studentId], references: [id])
  studentId    String
  
  @@index([assignmentId])
  @@index([studentId])
  @@map("submissions")
  @@unique([studentId, assignmentId])
}

model Attendance {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  status      String   // e.g., "PRESENT", "ABSENT", "UNMARKED"
  
  student     User     @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String

  professor   User     @relation("ProfessorAttendance", fields: [professorId], references: [id], onDelete: Cascade)
  professorId String

  @@index([studentId, courseId, date])
  @@unique([studentId, courseId, date])
  @@map("attendances")
}
