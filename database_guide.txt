## Database Setup
(some of this assumes you have terminal access)

### 1. Install PostgreSQL
1. Download PostgreSQL from the [official website](https://www.postgresql.org/download/)
2. During installation:
   - Set a password for the postgres user (write this down!)
   - Keep the default port (5432)
   - Install all components when prompted

### 2. Create Local Database
Open your terminal and follow these steps:

# Connect to PostgreSQL:
psql -U postgres

(Note:the above command is the standard way to connect, but I actually got a
permission denied error. If this happens to you, try: sudo -u postgres psql)

# Once connected, create the database with this command:
CREATE DATABASE coursecircle;

# Verify creation (lists all databases)
\l

# Exit psql
\q

### 3. Project Configuration
1. Create a new file named `.env` in the coursecircle root directory
2. Add your database connection string:

DATABASE_URL="postgresql://postgres:your_password@localhost:5432/coursecircle?schema=public"

3. Replace `your_password` with your actual postgres password from when you
installed it.

### 4. Install Dependencies

# Install Prisma and its client (you probably already did this since its been
in packages.json for a while, but just to
make sure that you have prisma)

npm install 

### 5. Initialize Database

# Apply database migrations
npx prisma migrate dev
(this will apply the schema I've been working on to the database you just
created)

# Verify setup with Prisma Studio
npx prisma studio
(this is kindof cool, it opens a browser tab that displays the full schema,
and you can look at each model separately)

## Usage & Maintenance

When you are testing a feature that will add data to one of the tables
(creating a user, adding files etc.) make sure the database is actually
running. To do this, get into the psql shell(using psql -U postgres or sudo -u
postgres psql), and then use this command to
connect to the coursecircle database: 

\c coursecircle

Then whatever action you are doing on the frontend should be able to affect
the database

### Common Commands

# View database in browser
npx prisma studio

# Update database after schema changes
If you want to make changes to the schema, edit the schema.prisma file and
then use this command:

npx prisma migrate dev --name describe_your_changes

# Reset database (Deletes all data; only use on your local development
database)
npx prisma migrate reset

# Update Prisma Client
npx prisma generate

### Troubleshooting

#### Connection Issues
- Verify PostgreSQL is running:
  - Windows: Check Services app
  - Mac: Run `brew services list`
  - Linux: `sudo service postgresql status`
- Confirm your password in DATABASE_URL matches your postgres password
- Check that port 5432 isn't blocked

#### Migration Problems
1. If migrations fail:
   ```
   npx prisma migrate reset
   npx prisma migrate dev
   ```
2. For schema conflicts:
   - Check git history of schema.prisma
   - Pull latest changes from main branch

## Schema Overview as of 2/12
Current models:
- User (integrated with Clerk auth)
- Course
- Assignment
- File

### 6. 2/26 UPDATE -- ngrok + clerk webhooks

##Before doing this stuff, make sure you have run the latest database
migration. Use the command: npx prisma migrate dev

##ngrok

#go to ngrok website and create a free account, then follow the install
structions for your OS. 
#Make sure you do the authtoken step
#next, open a new terminal window and generate an ngrok URL with the command:
ngrok http 3000 (because my dev server is on port 3000, I assume this is the
same for you guys). The url that you want to use looks something like: 
https://cb93-130-68-183-73.ngrok-free.app
#IMPORTANT: leave ngrok running in the terminal while you are testing webhooks
from clerk.

##Clerk

#in clerk, go to configure --> webhooks
#Under Endpoints, you'll see my ngrok url; note the path at the end making
sure clerk sends the webhook to the route.ts file.
#Change the URL of this endpoint to the one you generated earlier (but leave
the path to the file)
#Go to webhooks --> configure --> signing secret. Click reveal, and copy the
string it shows you.
#open you .env.local file, and add the following line:
CLERK_WEBHOOK_SECRET= <YOUR_SECRET_HERE>
#Now you should be able to sign up for coursecircle with a new email account
and have a user get created in the database. I think there is a feature to
send a test webhook, but I haven't found it, so I've just been testing with my
personal email. 

##Reminders for testing this:
1. make sure you have have the coursecircle database
open in a postgres shell
2. make sure ngrok is running
3. make sure you add your ngrok url with the correct file extension as a
webhook endpoint in clerk
4. Check that the user was created by running npx prisma studio. For me, the
new users get added to the very bottom of the table.
5. Note about ngrok; the url it gives you is dependent on the network you are
connected to. So If you set one up at home, you will need to generate a new
one at school, etc. 

##General note:

#This endpoint and route.ts file is just for user creation/updating/deleting.
#If something isn't working, the route.ts file is written to print logs to the
console where the dev server is running, so you can check those for info
